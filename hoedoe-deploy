#!/bin/env bash
#
# Script to make software deployments in running docky containers easier
#
#
yell() { echo "$0: $*" >&2; }
die() { yell "$*"; exit 111; }
try() { "$@" || die "cannot $*"; }
IMAGE=$1
TAG=$2
# VOLUMES="-v $(pwd)/data:/home/odoo/data"
DC_DIR="/home/docky/club3d-prod"
if [[ -z $1 ]]
    then
        echo "Which Image should be altered for deploy?"
        read IMAGE
        echo "Which Tag?"
        read TAG
            if [[ -z ${TAG} ]]
            then
                IMAGENAME=$IMAGE
            else
                IMAGENAME=${IMAGE}:${TAG}
            fi
fi
set -e

VERSION="1.24.1"
DCIMAGE="docker/compose:$VERSION"
# Setup options for connecting to docker host
if [ -z "$DOCKER_HOST" ]; then
    DOCKER_HOST="/var/run/docker.sock"
fi
if [ -S "$DOCKER_HOST" ]; then
    DOCKER_ADDR="-v $DOCKER_HOST:$DOCKER_HOST -e DOCKER_HOST"
else
    DOCKER_ADDR="-e DOCKER_HOST -e DOCKER_TLS_VERIFY -e DOCKER_CERT_PATH"
fi
# Setup volume mounts for compose config and context
if [ "$(pwd)" != '/' ]; then
    VOLUMES="-v $(pwd):$(pwd)"
fi
if [ -n "$COMPOSE_FILE" ]; then
    COMPOSE_OPTIONS="$COMPOSE_OPTIONS -e COMPOSE_FILE=$COMPOSE_FILE"
    compose_dir=$(realpath $(dirname $COMPOSE_FILE))
fi
COMPOSE_OPTIONS="$COMPOSE_OPTIONS -e IMAGENAME=$IMAGENAME"
# TODO: also check --file argument
if [ -n "$compose_dir" ]; then
    VOLUMES="$VOLUMES -v $compose_dir:$compose_dir"
fi
if [ -n "$HOME" ]; then
    VOLUMES="$VOLUMES -v $HOME:$HOME -v $HOME:/root" # mount $HOME in /root to share docker.config
fi
# Only allocate tty if we detect one
if [ -t 0 -a -t 1 ]; then
        DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -t"
fi
# Always set -i to support piped and terminal input in run/exec
DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS -i"
# Handle userns security
if [ ! -z "$(docker info 2>/dev/null | grep userns)" ]; then
    DOCKER_RUN_OPTIONS="$DOCKER_RUN_OPTIONS --userns=host"
fi

OLDIMAGEID=$(docker images -q --filter=reference=${IMAGENAME})

read -p "Do you want to update the database from the command line? (y/n) " A
if [[ ${A} = "y" ]]
    then
        if  [[ ! -z $(docker ps -q -f "ancestor=${OLDIMAGEID}") ]]
            then
                try docker rm -f $(docker ps -q -f "ancestor=${OLDIMAGEID}")
                echo "Removed containers derived from Image ${OLDIMAGEID}."
        fi
        read -p "Do you want to use the docker network connection with the database, if not you
         have to do odoo --db_host=xxx.xxx.xxx.xxx --db_port=5432
         (y/n): " K
            if [[ ${K} = "y" ]]
                then
                VOLUMES="$VOLUMES -v $(pwd)/.db/socket/:/var/run/postgresql/"
            fi
fi

# try docker run -it -u root ${VOLUMES} --name hoedoedeploy ${IMAGENAME} bash
try exec docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_OPTIONS $VOLUMES -w "$(pwd)" $DCIMAGE " -f docker-compose-hdd.yml up"


read -p "Do you want to commit the changes you made to ${IMAGENAME}? (y/n): " B
if [[ ${B} = "y" ]]
    then
        try docker commit hoedoedeploy ${IMAGENAME}
    else
        read -p "Do you want to commit to a different image? (y/n): " D
    if [[ ${D} = "y" ]]
        then
            read -p "Please specify the IMAGE:TAG you want to commit to:" E
            echo "Are you sure you want to commit to $E?"
            read F
            if [[ ${F} = "y" ]]
                then
                    try docker commit hoedoedeploy $E
                    OLDIMAGEIDALT=$(docker images -q --filter=reference=${E})
            fi
    fi
fi

echo "Update-Container hoedoedeploy will now be deleted"
docker rm hoedoedeploy

if [[ ${B} = "y" ]]
    then
        echo "Do you want to push the changes you made to ${IMAGENAME}? (y/n)"
        read C
        if [[ ${C} = "y" ]]
            then
                try docker push ${IMAGENAME}
        fi
fi
if [[ ${F} = "y" ]]
    then
        echo "Do you want to push the changes you made to ${E}? (y/n)"
        read C
        if [[ ${C} = "y" ]]
            then
                try docker push $E
        fi
fi
if [[ ${B} = "y" ]] && [[ ${A} != "y" ]]
    then
        echo "Do you want to stop and remove running containers from image
        ${IMAGENAME}? (y/n)"
        read G
        if [[ ${G} = "y" ]]
            then
                try docker rm -f $(docker ps -q -f "ancestor=${OLDIMAGEID}")
                echo "Removed containers derived from Image ${OLDIMAGEID}."
        fi
elif [[ ${B} = "y" ]]
    then
        echo "Do you want to run \"docker-compose up -d\"? (y/n)"
        read I
        if [[ ${I} = "y" ]]
            then
                cd ${DC_DIR}
                try exec docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_OPTIONS $VOLUMES -w "$(pwd)" $DCIMAGE "up -d"
                docker ps
                echo "READY!!!"
        fi
elif [[ ${D} = "y" ]] && [[ ${F} = "y" ]]
    then
        echo "Do you want to stop and remove running containers from image ${E}?"
        read H
        if [[ ${H} = "y" ]]
            then
                try docker rm -f $(docker ps -q -f "ancestor=${OLDIMAGEIDALT}")
                echo "Removed containers derived from Image ${OLDIMAGEIDALT}. Do you
                want to run \"docker-compose up -d\"? (y/n)"
                read J
                if [[ ${J} = "y" ]]
                    then
                        cd ${DC_DIR}
                        try exec docker run --rm $DOCKER_RUN_OPTIONS $DOCKER_ADDR $COMPOSE_OPTIONS $VOLUMES -w "$(pwd)" $DCIMAGE "up -d"
                        docker ps
                        echo "READY!!!"
                fi
        fi
fi